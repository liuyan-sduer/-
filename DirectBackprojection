clear;
%%=====利用向量代替for循环直接反投影=====%%
N=256;
theta=0:1:179;
theta_num=length(theta);
delta_theta=1;

%%=====头模型=====%%
I=phantom(N);

%%=====获得投影数据=====%%
P=radon(I,theta);
[mm,nn] = size(P);%计算投影矩阵的行和列
e = floor((mm-N-1)/2+1)+1;%投影数据的默认投影中心为floor(size(I)+1/2)
P = P(e:N+e-1,:);%截取中心N点数据,因投影数据较多，含无用数据

%%=====核心算法！利用向量代替for循环,建立x-y坐标轴，原点位于图像的原点=====%%
roi=N*[-0.5 0.5 -0.5 0.5];%设置感兴趣区域
hx=(roi(2)-roi(1))/(N-1);
hy=(roi(4)-roi(3))/(N-1);
xrange=roi(1)+hx*[0:N-1];
yrange=flipud((roi(3)+hy*[0:N-1])');
x=ones(N,1)*xrange;
y=yrange*ones(1,N);
rec=zeros(N);

%%=====反投影重建=====%%
for m=1:theta_num
    Pm=P(:,m);
    theta1=(m-1)*delta_theta*pi/180;
    s1=x.*cos(theta1)+y.*sin(theta1);
    s=s1+N/2;
    n=floor(s);
    t=s-n;
    n=max(1,n);n=min(n,N-1);%限定n范围为1~N-1
    P_new=(1-t).*Pm(n)+t.*Pm(n+1);
    rec=rec+P_new;
end
figure;
subplot(1,2,1),imshow(I,[]),title('原始图像');
subplot(1,2,2),imshow(rec,[]),title('直接反投影重建图像');
